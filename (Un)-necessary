#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
using ll = long long;
using ull = unsigned long long;
#define pb push_back
#define pf push_front
#define ff first
#define ss second
#define nl cout << "\n"
#define pi 2 * acos(0.0)
#define LSB_set(x) __builtin_ffs(x)
#define leading_zero(x) __builtin_clz(x)
#define trailing_zero(x) __builtin_ctz(x)
#define count_set_bits(x) __builtin_popcount(x)
#define all(f) (f).begin(), (f).end()
#define rall(f) (f).rbegin(), (f).rend()
#define Files                         \
    freopen("input.txt", "r", stdin); \
    freopen("output.txt", "w", stdout);
#define Faster                        \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);
template <typename T>
using o_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>; // os.find_by_order()-> value of index, os.order_of_key()-> count values less than target

//----------------------------------------------------------------
template <typename F, typename S>
ostream &operator<<(ostream &os, const pair<F, S> &p) { return os << "(" << p.first << ", " << p.second << ")"; }
template <typename T>
ostream &operator<<(ostream &os, const vector<T> &v)
{
    os << "{";
    for (auto it = v.begin(); it != v.end(); ++it)
    {
        if (it != v.begin())
            os << ", ";
        os << *it;
    }
    return os << "}";
}
template <typename T>
ostream &operator<<(ostream &os, const set<T> &v)
{
    os << "[";
    for (auto it = v.begin(); it != v.end(); ++it)
    {
        if (it != v.begin())
            os << ", ";
        os << *it;
    }
    return os << "]";
}
template <typename T>
ostream &operator<<(ostream &os, const multiset<T> &v)
{
    os << "[";
    for (auto it = v.begin(); it != v.end(); ++it)
    {
        if (it != v.begin())
            os << ", ";
        os << *it;
    }
    return os << "]";
}
template <typename F, typename S>
ostream &operator<<(ostream &os, const map<F, S> &v)
{
    os << "[";
    for (auto it = v.begin(); it != v.end(); ++it)
    {
        if (it != v.begin())
            os << ", ";
        os << it->first << " = " << it->second;
    }
    return os << "]";
}
#define dbg(args...)            \
    do                          \
    {                           \
        cerr << #args << " : "; \
        faltu(args);            \
    } while (0)
void faltu()
{
    cerr << endl;
}
template <typename T>
void faltu(T a[], int n)
{
    for (int i = 0; i < n; ++i)
        cerr << a[i] << ' ';
    cerr << endl;
}
template <typename T, typename... hello>
void faltu(T arg, const hello &...rest)
{
    cerr << arg << ' ';
    faltu(rest...);
}

//--------------------------------------------------------------------------------------
//======================================================================================
const ll inf = 1e6;
const ll mod = 1000000007;
//======================================================================================
bool Cmp(const pair<ll, ll> &p1, const pair<ll, ll> &p2)
{
    if (p1.ff < p2.ff)
    {
        return 1;
    }
    else if (p1.ff == p2.ff)
    {
        return (p1.ss < p2.ss);
    }
    return 0;
}
//--------------------------------------------------------------------------------------
inline bool check_Bit(ll n, int i) { return (n & (1LL << i)); }
inline ll set_Bit(ll n, int i) { return (n | (1LL << i)); }
inline ll reset_Bit(ll n, int i) { return (n & (~(1LL << i))); }
inline ll flip_Bit(ll n, int i) { return (n ^ (1LL << i)); }
//--------------------------------------------------------------------------------------

void Solve()
{
}

int main()
{

    // Faster;
    // Files;
    ll tests = 1;
    // cin >> tests;
    for (ll T = 1; T <= tests; T++)
    {
        // cout << "Case " << T << " : ";
        Solve();
    }
    return 0;
}

// in the end, it doesn't even matter
